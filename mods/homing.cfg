#####################################################################
#    Homing definition
#####################################################################
[homing_override]
axes: xyz
set_position_z: 0
gcode:
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=HOMING_state
  STATUS_HOMING
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
  G91                            ; relative positioning
  G0 Z5 F1500

  {% if home_all or 'X' in params %}
    _HOME_X
  {% endif %}
  {% if home_all or 'Y' in params %}
    _HOME_Y
  {% endif %}
  G90
  ##	XY Location of the Z Endstop Switch
  {% if home_all or 'Z' in params %}
    _HOME_Z
  {% endif %}
  #_STATUS_BUTTON_READY BUTTON=4
  STATUS_READY
  RESTORE_GCODE_STATE NAME=HOMING_state

[gcode_macro _HOME_X]
gcode:
  _SET_CURRENT VAL=HOME
  # Home
  G28 X
  # Move away
  G91
  G1 X-10 F1200
  # Wait just a secondâ€¦ (give StallGuard registers time to clear)
  _SET_CURRENT
  G4 P1000

[gcode_macro _HOME_Y]
gcode:
  _SET_CURRENT VAL=HOME
  # Home
  G28 Y
  # Move away
  G91
  G1 Y-10 F1200
  _SET_CURRENT

[gcode_macro _HOME_Z]
gcode:
  ##### get user defines #####
  # use -10 as default to insure it error in case the variable is not existing
  {% set z_endstop_x = printer['gcode_macro _USER_VARIABLE'].z_endstop_x|default(-10) %}
  {% set z_endstop_y = printer['gcode_macro _USER_VARIABLE'].z_endstop_y|default(-10) %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=HOMING_state

  ## reduce current of Z motors
  #_SET_ACC VAL=HOME
  #_SET_CURRENT VAL=HOME
    
  G91                            ; relative positioning
  G0 Z10 F1500
  G90                            ; absolute positioning

  # Home X and Y only for G28 or G28 XYZ
  {% if "x" not in printer.toolhead.homed_axes %}
    _HOME_X #G28 X
  {% endif %}
  {% if "y" not in printer.toolhead.homed_axes %}
    _HOME_Y #G28 Y
  {% endif %}

  ##	XY Location of the Z Endstop Switch
  G0 X{z_endstop_x} Y{z_endstop_y} F12000
  G28 Z                          ; home Z
  G0 Z2 F1500                   ; move up

  ## return to org current settings
  {% if params.RESET_SETTINGS|default('true') == 'true' %}
    DETACH_PROBE
    #_SET_CURRENT
    #_SET_ACC
  {% endif %}

  # Lift Z
  G0 Z{z_hop} F1800

  RESTORE_GCODE_STATE NAME=HOMING_state

#####################################################################
#    Macros
#####################################################################
## conditional home
[gcode_macro _CG28]
gcode:
  G90
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28 RESET_SETTINGS={ params.RESET_SETTINGS|default('true') }
  {% endif %}

[gcode_macro _SET_CURRENT]
description: Helper: Set X/Y-drive motor current
variable_last_val: 'CONFIG'
gcode:
  ###### set default values #####
  {% set default_respond = printer['gcode_macro _USER_VARIABLE'].respond_set_current|int %}
  {% set val = params.VAL|default('CONFIG') %}
  {% set respond = params.Z_RESPOND|default(default_respond)|int %}
  {% if val == 'HOME' %}
    {% set xy_run  = printer['gcode_macro _USER_VARIABLE'].xy_home_current %}
  {% else %}
    {% if 'tmc2209 stepper_z' in printer.configfile.settings %}
      {% set xy_run  = printer.configfile.settings['tmc2209 stepper_x'].run_current %}
    {% elif 'tmc5160 stepper_z' in printer.configfile.settings %}
      {% set xy_run  = printer.configfile.settings['tmc5160 stepper_x'].run_current %}
    {% endif %}
  {% endif %}
  ##### end of definition #####
  {% if val != last_val %}
    SET_GCODE_VARIABLE MACRO=_SET_CURRENT VARIABLE=last_val VALUE='"{val}"'
    {% if respond == 1 %}
      {action_respond_info("Home&Probe: RunCur %.2fA rms HoldCur %.2fA rms" % (z_run|float, z_hold|float))}
    {% endif %}
    SET_TMC_CURRENT STEPPER=stepper_x  CURRENT={xy_run}
    SET_TMC_CURRENT STEPPER=stepper_y  CURRENT={xy_run}
    M400
  {% endif %}

[gcode_macro _SET_ACC]
description: Helper: Set accel and accel_to_decel value
variable_last_val: 'CONFIG'
gcode:
  ##### set default value #####
  {% set default_respond = printer['gcode_macro _USER_VARIABLE'].respond_set_acc|int %}
  {% set val = params.VAL|default('CONFIG') %}
  {% set respond = params.RESPOND|default(default_respond)|int %}
  {% if val == 'HOME' %}
    {% set accel = printer['gcode_macro _USER_VARIABLE'].home_accel %}
    {% set accel_to_decel = printer['gcode_macro _USER_VARIABLE'].home_accel|int / 2 %}
  {% else %}
    {% set accel = printer.configfile.settings.printer.max_accel %}
    {% set accel_to_decel = printer.configfile.settings.printer.max_accel_to_decel %}
  {% endif %}
  ##### end of definition #####
  {% if val != last_val %}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=last_val VALUE='"{val}"'
    {% if respond == 1 %}
      {action_respond_info("VELOCITY_LIMIT set ACCEL: %d ACCEL_TO_DECEL: %d" % (accel|int, accel_to_decel|int))}
    {% endif %}
    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel} RESPOND=0
  {% endif %}